package com.example.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.stockx.bean.AccountDataBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_DATA_BEAN".
*/
public class AccountDataBeanDao extends AbstractDao<AccountDataBean, Long> {

    public static final String TABLENAME = "ACCOUNT_DATA_BEAN";

    /**
     * Properties of entity AccountDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AcountName = new Property(1, String.class, "acountName", false, "ACOUNT_NAME");
        public final static Property CurrentMoney = new Property(2, double.class, "currentMoney", false, "CURRENT_MONEY");
        public final static Property RiskRatio = new Property(3, double.class, "riskRatio", false, "RISK_RATIO");
        public final static Property MonthRiskRatio = new Property(4, double.class, "monthRiskRatio", false, "MONTH_RISK_RATIO");
        public final static Property TotalMonthRiskMoney = new Property(5, double.class, "totalMonthRiskMoney", false, "TOTAL_MONTH_RISK_MONEY");
        public final static Property UsedMonthRiskMoney = new Property(6, double.class, "usedMonthRiskMoney", false, "USED_MONTH_RISK_MONEY");
        public final static Property TotalRiskMoney = new Property(7, double.class, "totalRiskMoney", false, "TOTAL_RISK_MONEY");
        public final static Property UsedRiskMoney = new Property(8, double.class, "usedRiskMoney", false, "USED_RISK_MONEY");
    }


    public AccountDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACOUNT_NAME\" TEXT," + // 1: acountName
                "\"CURRENT_MONEY\" REAL NOT NULL ," + // 2: currentMoney
                "\"RISK_RATIO\" REAL NOT NULL ," + // 3: riskRatio
                "\"MONTH_RISK_RATIO\" REAL NOT NULL ," + // 4: monthRiskRatio
                "\"TOTAL_MONTH_RISK_MONEY\" REAL NOT NULL ," + // 5: totalMonthRiskMoney
                "\"USED_MONTH_RISK_MONEY\" REAL NOT NULL ," + // 6: usedMonthRiskMoney
                "\"TOTAL_RISK_MONEY\" REAL NOT NULL ," + // 7: totalRiskMoney
                "\"USED_RISK_MONEY\" REAL NOT NULL );"); // 8: usedRiskMoney
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String acountName = entity.getAcountName();
        if (acountName != null) {
            stmt.bindString(2, acountName);
        }
        stmt.bindDouble(3, entity.getCurrentMoney());
        stmt.bindDouble(4, entity.getRiskRatio());
        stmt.bindDouble(5, entity.getMonthRiskRatio());
        stmt.bindDouble(6, entity.getTotalMonthRiskMoney());
        stmt.bindDouble(7, entity.getUsedMonthRiskMoney());
        stmt.bindDouble(8, entity.getTotalRiskMoney());
        stmt.bindDouble(9, entity.getUsedRiskMoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String acountName = entity.getAcountName();
        if (acountName != null) {
            stmt.bindString(2, acountName);
        }
        stmt.bindDouble(3, entity.getCurrentMoney());
        stmt.bindDouble(4, entity.getRiskRatio());
        stmt.bindDouble(5, entity.getMonthRiskRatio());
        stmt.bindDouble(6, entity.getTotalMonthRiskMoney());
        stmt.bindDouble(7, entity.getUsedMonthRiskMoney());
        stmt.bindDouble(8, entity.getTotalRiskMoney());
        stmt.bindDouble(9, entity.getUsedRiskMoney());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountDataBean readEntity(Cursor cursor, int offset) {
        AccountDataBean entity = new AccountDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // acountName
            cursor.getDouble(offset + 2), // currentMoney
            cursor.getDouble(offset + 3), // riskRatio
            cursor.getDouble(offset + 4), // monthRiskRatio
            cursor.getDouble(offset + 5), // totalMonthRiskMoney
            cursor.getDouble(offset + 6), // usedMonthRiskMoney
            cursor.getDouble(offset + 7), // totalRiskMoney
            cursor.getDouble(offset + 8) // usedRiskMoney
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAcountName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrentMoney(cursor.getDouble(offset + 2));
        entity.setRiskRatio(cursor.getDouble(offset + 3));
        entity.setMonthRiskRatio(cursor.getDouble(offset + 4));
        entity.setTotalMonthRiskMoney(cursor.getDouble(offset + 5));
        entity.setUsedMonthRiskMoney(cursor.getDouble(offset + 6));
        entity.setTotalRiskMoney(cursor.getDouble(offset + 7));
        entity.setUsedRiskMoney(cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
